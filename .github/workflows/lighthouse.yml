name: Lighthouse Audit (Reusable)

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        description: 'Workflow execution mode: pr-build or production'
      config-path:
        required: true
        type: string
        description: 'Path to lhrc config file'
      urls:
        required: false
        type: string
        description: 'Newline-separated production URLs (production mode only)'
      compare-baseline:
        required: false
        type: boolean
        default: false
        description: 'Build and compare against main branch baseline (pr-build mode only)'
      upload-artifacts:
        required: false
        type: boolean
        default: true
        description: 'Upload Lighthouse reports as workflow artifacts'
    outputs:
      manifest:
        description: 'Lighthouse CI manifest with audit results'
        value: ${{ jobs.lighthouse.outputs.manifest }}
      links:
        description: 'Map of URLs to public report links'
        value: ${{ jobs.lighthouse.outputs.links }}
      status:
        description: 'Workflow execution status'
        value: ${{ jobs.lighthouse.outputs.status }}

jobs:
  lighthouse:
    name: ${{ inputs.mode == 'pr-build' && 'PR Build Audit' || 'Production Audit' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      CI: true
    outputs:
      manifest: ${{ steps.output-results.outputs.manifest }}
      links: ${{ steps.output-results.outputs.links }}
      status: ${{ steps.output-results.outputs.status }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # PR Build Mode: Download artifacts
      - name: Download PR build artifacts
        if: ${{ inputs.mode == 'pr-build' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: build-output
          path: dist

      # PR Build Mode: Run Lighthouse on PR
      - name: Run Lighthouse on PR
        if: ${{ inputs.mode == 'pr-build' }}
        id: lighthouse-pr
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@fcd65974f7c4c2bf0ee9d09b84d2489183c29726 # v12
        with:
          configPath: ${{ inputs.config-path }}
          temporaryPublicStorage: true
          uploadArtifacts: ${{ inputs.upload-artifacts }}
          artifactName: lighthouse-pr
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.event.pull_request.head.sha }}

      # PR Build Mode: Save PR results
      - name: Save PR results
        if: ${{ inputs.mode == 'pr-build' }}
        run: |
          mkdir -p /tmp/lighthouse-results
          echo '${{ steps.lighthouse-pr.outputs.manifest }}' > /tmp/lighthouse-results/pr-manifest.json
          echo '${{ steps.lighthouse-pr.outputs.links }}' > /tmp/lighthouse-results/pr-links.json

      # PR Build Mode with Baseline: Checkout main
      - name: Checkout main branch
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main

      # PR Build Mode with Baseline: Check config exists
      - name: Check if Lighthouse config exists on main
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline }}
        id: check-config
        run: |
          if [ -f "${{ inputs.config-path }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # PR Build Mode with Baseline: Setup Node.js
      - name: Setup Node.js
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version-file: '.nvmrc'

      # PR Build Mode with Baseline: Setup pnpm
      - name: Setup pnpm
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      # PR Build Mode with Baseline: Get pnpm store
      - name: Get pnpm store directory
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # PR Build Mode with Baseline: Setup cache
      - name: Setup pnpm cache
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # PR Build Mode with Baseline: Install dependencies
      - name: Install dependencies
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        run: pnpm install --frozen-lockfile

      # PR Build Mode with Baseline: Build main
      - name: Build main branch
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        run: pnpm build

      # PR Build Mode with Baseline: Run Lighthouse on main
      - name: Run Lighthouse on main
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        id: lighthouse-main
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@fcd65974f7c4c2bf0ee9d09b84d2489183c29726 # v12
        with:
          configPath: ${{ inputs.config-path }}
          temporaryPublicStorage: true
          uploadArtifacts: ${{ inputs.upload-artifacts }}
          artifactName: lighthouse-main
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.event.pull_request.base.sha }}

      # PR Build Mode with Baseline: Save main results
      - name: Save main results
        if: ${{ inputs.mode == 'pr-build' && inputs.compare-baseline && steps.check-config.outputs.exists == 'true' }}
        run: |
          echo '${{ steps.lighthouse-main.outputs.manifest }}' > /tmp/lighthouse-results/main-manifest.json
          echo '${{ steps.lighthouse-main.outputs.links }}' > /tmp/lighthouse-results/main-links.json

      # PR Build Mode: Checkout PR branch for script
      - name: Checkout PR branch for script
        if: ${{ inputs.mode == 'pr-build' && always() }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # PR Build Mode: Generate comparison report
      - name: Generate comparison report
        if: ${{ inputs.mode == 'pr-build' && always() }}
        run: |
          PR_MANIFEST=$(cat /tmp/lighthouse-results/pr-manifest.json)
          PR_LINKS=$(cat /tmp/lighthouse-results/pr-links.json)

          # Check if Lighthouse actually ran and produced results
          if [ "$PR_MANIFEST" = "" ] || [ "$PR_MANIFEST" = "{}" ] || [ "$PR_MANIFEST" = "[]" ]; then
            echo "## ⚠️ Lighthouse Audit Did Not Complete" > lighthouse-comment.md
            echo "" >> lighthouse-comment.md
            echo "The Lighthouse audit failed to produce results. Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details." >> lighthouse-comment.md
            echo "" >> lighthouse-comment.md
            echo "<!-- lighthouse-ci-report -->" >> lighthouse-comment.md
            exit 0
          fi

          if [ -f "/tmp/lighthouse-results/main-manifest.json" ]; then
            MAIN_MANIFEST=$(cat /tmp/lighthouse-results/main-manifest.json)
            MAIN_LINKS=$(cat /tmp/lighthouse-results/main-links.json)
          else
            MAIN_MANIFEST=""
            MAIN_LINKS=""
          fi

          {
            node .github/scripts/lighthouse-report.js \
              "$PR_MANIFEST" \
              "$PR_LINKS" \
              "$MAIN_MANIFEST" \
              "$MAIN_LINKS"
            echo ""
            echo "<!-- lighthouse-ci-report -->"
          } > lighthouse-comment.md

      # PR Build Mode: Find existing comment
      - name: Find existing comment
        if: ${{ inputs.mode == 'pr-build' && always() }}
        id: find-comment
        run: |
          COMMENT_ID=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '.[] | select(.body | contains("<!-- lighthouse-ci-report -->")) | .id' | head -1)
          echo "comment_id=$COMMENT_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      # PR Build Mode: Post or update PR comment
      - name: Post or update PR comment
        if: ${{ inputs.mode == 'pr-build' && always() }}
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9 # v5.0.0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment_id }}
          body-path: lighthouse-comment.md
          edit-mode: replace

      # Production Mode: Run Lighthouse on production URLs
      - name: Audit Production URLs
        if: ${{ inputs.mode == 'production' }}
        id: lighthouse-prod
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@fcd65974f7c4c2bf0ee9d09b84d2489183c29726 # v12
        with:
          urls: ${{ inputs.urls }}
          temporaryPublicStorage: true
          runs: 3
          configPath: ${{ inputs.config-path }}

      # Production Mode: Generate formatted report
      - name: Generate formatted report
        if: ${{ inputs.mode == 'production' && always() }}
        run: |
          if [ -n "${{ steps.lighthouse-prod.outputs.manifest }}" ]; then
            REPORT=$(node .github/scripts/lighthouse-report.js \
              '${{ steps.lighthouse-prod.outputs.manifest }}' \
              '${{ steps.lighthouse-prod.outputs.links || '{}' }}' \
              '' \
              '')
            echo "$REPORT" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Lighthouse Audit Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The Lighthouse audit did not produce results. Check the logs above for errors." >> $GITHUB_STEP_SUMMARY
          fi

      # Set outputs for both modes
      - name: Set output results
        id: output-results
        if: always()
        run: |
          if [ "${{ inputs.mode }}" = "pr-build" ]; then
            echo "manifest=${{ steps.lighthouse-pr.outputs.manifest }}" >> $GITHUB_OUTPUT
            echo "links=${{ steps.lighthouse-pr.outputs.links }}" >> $GITHUB_OUTPUT
            if [ "${{ steps.lighthouse-pr.outcome }}" = "success" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
            elif [ "${{ steps.lighthouse-pr.outcome }}" = "failure" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
            else
              echo "status=warning" >> $GITHUB_OUTPUT
            fi
          else
            echo "manifest=${{ steps.lighthouse-prod.outputs.manifest }}" >> $GITHUB_OUTPUT
            echo "links=${{ steps.lighthouse-prod.outputs.links }}" >> $GITHUB_OUTPUT
            if [ "${{ steps.lighthouse-prod.outcome }}" = "success" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
            elif [ "${{ steps.lighthouse-prod.outcome }}" = "failure" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
            else
              echo "status=warning" >> $GITHUB_OUTPUT
            fi
          fi
