name: Build Check

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    uses: raisedadead/portfolio/.github/workflows/lint.yml@main

  test:
    name: Test
    uses: raisedadead/portfolio/.github/workflows/test.yml@main

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      CI: true

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: ${{ matrix.node-version }}
          package-manager-cache: false

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-astro-${{ hashFiles('**/pnpm-lock.yaml') }}-${{
            hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-astro-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: |
          pnpm install

      - name: Build
        run: |
          pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 1

  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: build
    permissions:
      contents: read
      pull-requests: write
    env:
      CI: true

    steps:
      - name: Checkout PR
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Download PR build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist

      - name: Run Lighthouse on PR
        id: lighthouse-pr
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: .github/lighthouse/lhrc.build.json
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-pr
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.event.pull_request.head.sha }}

      - name: Save PR results
        run: |
          echo '${{ steps.lighthouse-pr.outputs.manifest }}' > pr-manifest.json
          echo '${{ steps.lighthouse-pr.outputs.links }}' > pr-links.json

      - name: Checkout main branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build main branch
        run: pnpm build

      - name: Run Lighthouse on main
        id: lighthouse-main
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: .github/lighthouse/lhrc.build.json
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-main
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.event.pull_request.base.sha }}

      - name: Save main results
        run: |
          echo '${{ steps.lighthouse-main.outputs.manifest }}' > main-manifest.json
          echo '${{ steps.lighthouse-main.outputs.links }}' > main-links.json

      - name: Generate comparison report
        run: |
          node << 'SCRIPT'
          const fs = require('fs');

          const prManifest = JSON.parse(fs.readFileSync('pr-manifest.json', 'utf8'));
          const mainManifest = JSON.parse(fs.readFileSync('main-manifest.json', 'utf8'));
          const prLinks = JSON.parse(fs.readFileSync('pr-links.json', 'utf8'));
          const mainLinks = JSON.parse(fs.readFileSync('main-links.json', 'utf8'));

          function getMetrics(manifest) {
            const metrics = {};
            for (const result of manifest) {
              const url = result.url;
              const summary = result.summary;
              metrics[url] = {
                performance: summary.performance,
                accessibility: summary.accessibility,
                'best-practices': summary['best-practices'],
                seo: summary.seo,
                fcp: summary['first-contentful-paint'],
                lcp: summary['largest-contentful-paint'],
                tbt: summary['total-blocking-time'],
                cls: summary['cumulative-layout-shift'],
                si: summary['speed-index']
              };
            }
            return metrics;
          }

          function formatScore(score) {
            const percentage = Math.round(score * 100);
            if (score >= 0.9) return `üü¢ ${percentage}`;
            if (score >= 0.5) return `üü† ${percentage}`;
            return `üî¥ ${percentage}`;
          }

          function formatDiff(pr, main) {
            if (!main) return formatScore(pr);
            const diff = pr - main;
            const diffStr = diff >= 0 ? `+${Math.round(diff * 100)}` : Math.round(diff * 100);
            const arrow = diff > 0 ? 'üìà' : diff < 0 ? 'üìâ' : '‚û°Ô∏è';
            return `${formatScore(pr)} (${arrow} ${diffStr})`;
          }

          function formatMetric(pr, main, format = 'ms') {
            if (format === 'score') return formatDiff(pr, main);
            const prVal = Math.round(pr);
            const mainVal = main ? Math.round(main) : null;
            if (!mainVal) return `${prVal}${format}`;
            const diff = prVal - mainVal;
            const diffStr = diff > 0 ? `+${diff}` : diff;
            const arrow = diff < 0 ? 'üìà' : diff > 0 ? 'üìâ' : '‚û°Ô∏è';
            return `${prVal}${format} (${arrow} ${diffStr}${format})`;
          }

          const prMetrics = getMetrics(prManifest);
          const mainMetrics = getMetrics(mainManifest);

          let comment = '## üî¶ Lighthouse Performance Report\n\n';
          comment += '### Performance Scores\n\n';
          comment += '| URL | Performance | Accessibility | Best Practices | SEO |\n';
          comment += '| --- | ----------- | ------------- | -------------- | --- |\n';

          for (const url of Object.keys(prMetrics)) {
            const urlPath = new URL(url).pathname || '/';
            const pr = prMetrics[url];
            const main = mainMetrics[url];

            comment += `| ${urlPath} `;
            comment += `| ${formatDiff(pr.performance, main?.performance)} `;
            comment += `| ${formatDiff(pr.accessibility, main?.accessibility)} `;
            comment += `| ${formatDiff(pr['best-practices'], main?.['best-practices'])} `;
            comment += `| ${formatDiff(pr.seo, main?.seo)} |\n`;
          }

          comment += '\n### Core Web Vitals\n\n';
          comment += '| URL | FCP | LCP | TBT | CLS | SI |\n';
          comment += '| --- | --- | --- | --- | --- | --- |\n';

          for (const url of Object.keys(prMetrics)) {
            const urlPath = new URL(url).pathname || '/';
            const pr = prMetrics[url];
            const main = mainMetrics[url];

            comment += `| ${urlPath} `;
            comment += `| ${formatMetric(pr.fcp, main?.fcp, 'ms')} `;
            comment += `| ${formatMetric(pr.lcp, main?.lcp, 'ms')} `;
            comment += `| ${formatMetric(pr.tbt, main?.tbt, 'ms')} `;
            comment += `| ${formatMetric(pr.cls, main?.cls, '')} `;
            comment += `| ${formatMetric(pr.si, main?.si, 'ms')} |\n`;
          }

          comment += '\n### Full Reports\n\n';
          comment += '| URL | PR Build | Main Branch |\n';
          comment += '| --- | -------- | ----------- |\n';

          for (const url of Object.keys(prLinks)) {
            const urlPath = new URL(url).pathname || '/';
            comment += `| ${urlPath} `;
            comment += `| [View Report](${prLinks[url]}) `;
            comment += `| [View Report](${mainLinks[url] || 'N/A'}) |\n`;
          }

          comment += '\n---\n';
          comment += '*üìä Metrics compared against `main` branch ‚Ä¢ üü¢ Good (‚â•90) ‚Ä¢ üü† Needs Improvement (50-89) ‚Ä¢ üî¥ Poor (<50)*\n';
          comment += '*üìà Better than main ‚Ä¢ üìâ Worse than main ‚Ä¢ ‚û°Ô∏è No change*\n';

          fs.writeFileSync('lighthouse-comment.md', comment);
          SCRIPT

      - name: Post or update PR comment
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9 # v5.0.0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: lighthouse-comment.md
          edit-mode: replace
