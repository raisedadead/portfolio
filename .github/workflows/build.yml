name: Build Check

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    uses: raisedadead/portfolio/.github/workflows/lint.yml@main

  test:
    name: Test
    uses: raisedadead/portfolio/.github/workflows/test.yml@main

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      CI: true

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: ${{ matrix.node-version }}
          package-manager-cache: false

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-astro-${{ hashFiles('**/pnpm-lock.yaml') }}-${{
            hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-astro-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: |
          pnpm install

      - name: Build
        run: |
          pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: build-output
          path: dist/
          retention-days: 1

  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: build
    permissions:
      contents: read
      pull-requests: write
    env:
      CI: true

    steps:
      - name: Checkout PR
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Download PR build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: build-output
          path: dist

      - name: Run Lighthouse on PR
        id: lighthouse-pr
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@fcd65974f7c4c2bf0ee9d09b84d2489183c29726 # v12
        with:
          configPath: .github/lighthouse/lhrc.build.json
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-pr
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.event.pull_request.head.sha }}

      - name: Save PR results
        run: |
          mkdir -p /tmp/lighthouse-results
          echo '${{ steps.lighthouse-pr.outputs.manifest }}' > /tmp/lighthouse-results/pr-manifest.json
          echo '${{ steps.lighthouse-pr.outputs.links }}' > /tmp/lighthouse-results/pr-links.json

      - name: Checkout main branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main

      - name: Check if Lighthouse config exists on main
        id: check-config
        run: |
          if [ -f ".github/lighthouse/lhrc.build.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check-config.outputs.exists == 'true'
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        if: steps.check-config.outputs.exists == 'true'
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0

      - name: Get pnpm store directory
        if: steps.check-config.outputs.exists == 'true'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: steps.check-config.outputs.exists == 'true'
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        if: steps.check-config.outputs.exists == 'true'
        run: pnpm install --frozen-lockfile

      - name: Build main branch
        if: steps.check-config.outputs.exists == 'true'
        run: pnpm build

      - name: Run Lighthouse on main
        if: steps.check-config.outputs.exists == 'true'
        id: lighthouse-main
        continue-on-error: true
        uses: treosh/lighthouse-ci-action@fcd65974f7c4c2bf0ee9d09b84d2489183c29726 # v12
        with:
          configPath: .github/lighthouse/lhrc.build.json
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-main
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.event.pull_request.base.sha }}

      - name: Save main results
        if: steps.check-config.outputs.exists == 'true'
        run: |
          echo '${{ steps.lighthouse-main.outputs.manifest }}' > /tmp/lighthouse-results/main-manifest.json
          echo '${{ steps.lighthouse-main.outputs.links }}' > /tmp/lighthouse-results/main-links.json

      - name: Checkout PR branch for script
        if: always()
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Generate comparison report
        if: always()
        run: |
          PR_MANIFEST=$(cat /tmp/lighthouse-results/pr-manifest.json)
          PR_LINKS=$(cat /tmp/lighthouse-results/pr-links.json)

          # Check if Lighthouse actually ran and produced results
          if [ "$PR_MANIFEST" = "" ] || [ "$PR_MANIFEST" = "{}" ] || [ "$PR_MANIFEST" = "[]" ]; then
            echo "## ⚠️ Lighthouse Audit Did Not Complete" > lighthouse-comment.md
            echo "" >> lighthouse-comment.md
            echo "The Lighthouse audit failed to produce results. Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details." >> lighthouse-comment.md
            echo "" >> lighthouse-comment.md
            echo "<!-- lighthouse-ci-report -->" >> lighthouse-comment.md
            exit 0
          fi

          if [ -f "/tmp/lighthouse-results/main-manifest.json" ]; then
            MAIN_MANIFEST=$(cat /tmp/lighthouse-results/main-manifest.json)
            MAIN_LINKS=$(cat /tmp/lighthouse-results/main-links.json)
          else
            MAIN_MANIFEST=""
            MAIN_LINKS=""
          fi

          {
            node .github/scripts/lighthouse-report.js \
              "$PR_MANIFEST" \
              "$PR_LINKS" \
              "$MAIN_MANIFEST" \
              "$MAIN_LINKS"
            echo ""
            echo "<!-- lighthouse-ci-report -->"
          } > lighthouse-comment.md

      - name: Find existing comment
        if: always()
        id: find-comment
        run: |
          COMMENT_ID=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '.[] | select(.body | contains("<!-- lighthouse-ci-report -->")) | .id' | head -1)
          echo "comment_id=$COMMENT_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Post or update PR comment
        if: always()
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9 # v5.0.0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment_id }}
          body-path: lighthouse-comment.md
          edit-mode: replace
