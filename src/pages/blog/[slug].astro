---
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import MainLayout from '@/layouts/main-layout.astro';
import { formatDate } from '@/lib/formatDate';
import { highlightCode } from '@/lib/syntax-highlighter';
import CodeBlock from '@/components/code-block';
import { cn } from '@/lib/utils';

export const getStaticPaths = (async () => {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.data.slug },
    props: { post }
  }));
}) satisfies GetStaticPaths;

const { post } = Astro.props;
const { data } = post;

// SEO metadata with fallbacks
const pageTitle = data.seo?.title || data.title;
const pageDescription = data.seo?.description || data.brief;
const pageImage = data.coverImage?.url;

// Parse content for code blocks and create sections
const contentHtml = data.content.html;
const codeBlocks: Array<{ language: string; code: string; fullMatch: string; index: number }> = [];

// Pattern 1: Code blocks with language class (e.g., class="lang-bash")
const codeBlockWithLangPattern = /<pre><code class="lang-(\w+)">([\s\S]*?)<\/code><\/pre>/g;
let match;

while ((match = codeBlockWithLangPattern.exec(contentHtml)) !== null) {
  const decodedCode = match[2]
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'");
  const plainCode = decodedCode.replace(/<[^>]+>/g, '');
  codeBlocks.push({
    language: match[1],
    code: plainCode,
    fullMatch: match[0],
    index: match.index
  });
}

// Pattern 2: Code blocks without language class (e.g., plain <pre><code>)
const codeBlockPlainPattern = /<pre><code>([\s\S]*?)<\/code><\/pre>/g;
while ((match = codeBlockPlainPattern.exec(contentHtml)) !== null) {
  // Skip if this block was already captured by the language pattern
  if (codeBlocks.some((block) => match[0] === block.fullMatch)) {
    continue;
  }

  const decodedCode = match[1]
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'");
  const plainCode = decodedCode.replace(/<[^>]+>/g, '').trim();
  codeBlocks.push({
    language: 'plaintext',
    code: plainCode,
    fullMatch: match[0],
    index: match.index
  });
}

// Sort code blocks by position
codeBlocks.sort((a, b) => a.index - b.index);

// Create sections alternating between HTML and code blocks
interface ContentSection {
  type: 'html' | 'code';
  content: string;
  rawCode?: string;
}

const sections: ContentSection[] = [];
let lastIndex = 0;

for (const block of codeBlocks) {
  // Add HTML section before this code block
  if (block.index > lastIndex) {
    sections.push({
      type: 'html',
      content: contentHtml.substring(lastIndex, block.index)
    });
  }

  // Highlight code at build time
  const highlightedCode = await highlightCode(block.code, block.language);
  sections.push({
    type: 'code',
    content: highlightedCode,
    rawCode: block.code
  });

  lastIndex = block.index + block.fullMatch.length;
}

// Add remaining HTML after last code block
if (lastIndex < contentHtml.length) {
  sections.push({
    type: 'html',
    content: contentHtml.substring(lastIndex)
  });
}
---

<MainLayout pageTitle={pageTitle} pageDescription={pageDescription} pageImage={pageImage} variant='prose'>
  <article
    class={cn(
      'mx-auto max-w-4xl overflow-hidden',
      'bg-white dark:bg-gray-800',
      'no-underline',
      'shadow-[6px_8px_0px_var(--color-black)]',
      'dark:shadow-[6px_8px_0px_var(--color-white)]',
      'transition-colors duration-100'
    )}
  >
    <!-- Cover Image or Fallback -->
    {
      data.coverImage?.url ? (
        <div class='relative aspect-video w-full'>
          <Image
            src={data.coverImage.url}
            alt={data.coverImage.alt || data.title}
            width={1200}
            height={675}
            class='h-full w-full object-cover'
            loading='eager'
          />
        </div>
      ) : (
        <div class='flex aspect-video items-center justify-center bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500'>
          <span class='text-6xl'>üìù</span>
        </div>
      )
    }

    <!-- Content Container -->
    <div class='p-6 sm:p-10'>
      <!-- Title -->
      <h1 class='mb-10 line-clamp-2 text-3xl font-bold text-gray-900 sm:text-4xl dark:text-gray-100'>
        {data.title}
      </h1>

      <!-- Metadata -->
      <div class='mb-8 flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400'>
        <time datetime={data.publishedAt.toISOString()}>
          {formatDate(data.publishedAt)}
        </time>
        <span>‚Ä¢</span>
        <span>{data.readingTime} min read</span>
      </div>

      <!-- Post Content with Prose Styling -->
      <div
        class={cn(
          'prose prose-lg dark:prose-invert max-w-none',
          'prose-p:text-gray-700 dark:prose-p:text-gray-300',
          'prose-p:my-2 prose-p:leading-relaxed',
          'prose-strong:text-gray-800 dark:prose-strong:text-gray-200',
          'prose-headings:font-semibold prose-headings:text-gray-800 dark:prose-headings:text-gray-100',
          'prose-h2:mb-2 prose-h2:mt-8',
          'prose-h3:mb-2 prose-h3:mt-6',
          'prose-h4:mb-2 prose-h4:mt-4',
          'prose-a:text-blue-600 prose-a:no-underline prose-a:hover:underline dark:prose-a:text-blue-400',
          'prose-ul:list-disc prose-li:text-gray-700 dark:prose-li:text-gray-300',
          'prose-img:my-4 prose-img:rounded-md prose-img:shadow-md',
          'prose-hr:border-gray-200 dark:prose-hr:border-gray-700',
          'prose-blockquote:border-l-4 prose-blockquote:border-gray-400 prose-blockquote:pl-4 prose-blockquote:italic prose-blockquote:text-gray-700 dark:prose-blockquote:text-gray-300'
        )}
      >
        {
          sections.map((section) =>
            section.type === 'html' ? (
              <Fragment set:html={section.content} />
            ) : (
              <div class='my-4'>
                <CodeBlock code={section.rawCode!} html={section.content} client:load />
              </div>
            )
          )
        }
      </div>
    </div>
  </article>
</MainLayout>
