---
import { Image } from 'astro:assets';
import { formatDate } from '@/lib/formatDate';
import { getBentoGridSpan } from '@/lib/blog-utils';
import { calculateImageDimensions } from '@/lib/image-dimensions';

interface Props {
  post: any; // BlogPost type from content collection
  index?: number; // Index for bento grid pattern
}

const { post, index = 0 } = Astro.props;
const { data } = post;

// Fallback for missing cover image
const hasCoverImage = data.coverImage?.url;

// Get bento grid span classes
const { desktop, aspectClass, aspectRatio, height } = getBentoGridSpan(index);

// Calculate responsive dimensions
const dimensions = calculateImageDimensions(aspectRatio, index);
---

<article
  class={`group relative overflow-hidden rounded-lg border-2 border-black bg-white shadow-[4px_4px_0px_var(--color-black)] transition-all duration-100 hover:bg-orange-100 hover:shadow-[6px_6px_0px_var(--color-black)] sm:col-span-2 lg:${desktop}`}
>
  <a href={`/blog/${post.id}`} class='block'>
    {
      hasCoverImage ? (
        <div class={`relative w-full overflow-hidden ${aspectClass} ${height}`}>
          <div class='absolute inset-0 animate-pulse bg-gray-200' />

          <Image
            src={data.coverImage.url}
            alt={data.coverImage.alt || data.title}
            width={dimensions.mobile.width}
            height={dimensions.mobile.height}
            class='h-full w-full object-cover transition-all duration-500 group-hover:scale-105'
            style='opacity: 0; animation: fadeIn 0.5s ease-in forwards;'
            loading='lazy'
          />
        </div>
      ) : (
        <div
          class={`flex items-center justify-center bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 ${aspectClass} ${height}`}
        >
          <span class='text-6xl'>üìù</span>
        </div>
      )
    }

    <div class='p-6'>
      <h2 class='mb-3 line-clamp-2 text-xl font-bold text-gray-900'>
        {data.title}
      </h2>

      <div class='mb-3 flex items-center gap-4 text-sm text-gray-600'>
        <time datetime={data.publishedAt.toISOString()}>
          {formatDate(data.publishedAt)}
        </time>
        <span>{data.readingTime} min read</span>
      </div>

      <p class='mb-4 line-clamp-3 text-gray-700'>
        {data.brief}
      </p>

      {
        data.tags && data.tags.length > 0 && (
          <div class='flex flex-wrap gap-2'>
            {data.tags.slice(0, 3).map((tag: any) => (
              <span class='inline-block rounded-full bg-gray-100 px-3 py-1 text-xs font-medium text-gray-700'>
                {tag.name}
              </span>
            ))}
          </div>
        )
      }
    </div>
  </a>
</article>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
